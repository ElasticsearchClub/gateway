// Code generated by "generate-fastjson". DO NOT EDIT.

package model

import (
	"infini.sh/framework/lib/fastjson_marshal"
)

func (v *Request) MarshalFastJSON(w *fastjson_marshal.Writer) error {
	w.RawByte('{')
	w.RawString("\"body_length\":")
	w.Int64(int64(v.BodyLength))
	if v.Body != "" {
		w.RawString(",\"body\":")
		w.String(v.Body)
	}
	if v.Header != nil {
		w.RawString(",\"header\":")
		w.RawByte('{')
		{
			first := true
			for k, v := range v.Header {
				if first {
					first = false
				} else {
					w.RawByte(',')
				}
				w.String(k)
				w.RawByte(':')
				w.String(v)
			}
		}
		w.RawByte('}')
	}
	if v.Host != "" {
		w.RawString(",\"host\":")
		w.String(v.Host)
	}
	if v.LocalAddr != "" {
		w.RawString(",\"local_addr\":")
		w.String(v.LocalAddr)
	}
	if v.Method != "" {
		w.RawString(",\"method\":")
		w.String(v.Method)
	}
	if v.Path != "" {
		w.RawString(",\"path\":")
		w.String(v.Path)
	}
	if v.QueryArgs != nil {
		w.RawString(",\"query_args\":")
		w.RawByte('{')
		{
			first := true
			for k, v := range v.QueryArgs {
				if first {
					first = false
				} else {
					w.RawByte(',')
				}
				w.String(k)
				w.RawByte(':')
				w.String(v)
			}
		}
		w.RawByte('}')
	}
	if v.RemoteAddr != "" {
		w.RawString(",\"remote_addr\":")
		w.String(v.RemoteAddr)
	}
	if v.StartTime != "" {
		w.RawString(",\"started\":")
		w.String(v.StartTime)
	}
	if v.URI != "" {
		w.RawString(",\"uri\":")
		w.String(v.URI)
	}
	if v.User != "" {
		w.RawString(",\"user\":")
		w.String(v.User)
	}
	w.RawByte('}')
	return nil
}

func (v *Response) MarshalFastJSON(w *fastjson_marshal.Writer) error {
	w.RawByte('{')
	w.RawString("\"body_length\":")
	w.Int64(int64(v.BodyLength))
	w.RawString(",\"cached\":")
	w.Bool(v.Cached)
	w.RawString(",\"elapsed\":")
	w.Float32(v.ElapsedTimeInMs)
	w.RawString(",\"status_code\":")
	w.Int64(int64(v.StatusCode))
	if v.Body != "" {
		w.RawString(",\"body\":")
		w.String(v.Body)
	}
	if v.Header != nil {
		w.RawString(",\"header\":")
		w.RawByte('{')
		{
			first := true
			for k, v := range v.Header {
				if first {
					first = false
				} else {
					w.RawByte(',')
				}
				w.String(k)
				w.RawByte(':')
				w.String(v)
			}
		}
		w.RawByte('}')
	}
	if v.LocalAddr != "" {
		w.RawString(",\"local_addr\":")
		w.String(v.LocalAddr)
	}
	if v.RemoteAddr != "" {
		w.RawString(",\"remote_addr\":")
		w.String(v.RemoteAddr)
	}
	w.RawByte('}')
	return nil
}

func (v *DataFlow) MarshalFastJSON(w *fastjson_marshal.Writer) error {
	w.RawByte('{')
	w.RawString("\"from\":")
	w.String(v.From)
	w.RawString(",\"process\":")
	if v.Process == nil {
		w.RawString("null")
	} else {
		w.RawByte('[')
		for i, v := range v.Process {
			if i != 0 {
				w.RawByte(',')
			}
			w.String(v)
		}
		w.RawByte(']')
	}
	w.RawString(",\"relay\":")
	w.String(v.Relay)
	w.RawString(",\"to\":")
	if v.To == nil {
		w.RawString("null")
	} else {
		w.RawByte('[')
		for i, v := range v.To {
			if i != 0 {
				w.RawByte(',')
			}
			w.String(v)
		}
		w.RawByte(']')
	}
	w.RawByte('}')
	return nil
}

func (v *HttpRequest) MarshalFastJSON(w *fastjson_marshal.Writer) error {
	var firstErr error
	w.RawByte('{')
	w.RawString("\"tls\":")
	w.Bool(v.IsTLS)
	if v.LoggingTime != "" {
		w.RawString(",\"@timestamp\":")
		w.String(v.LoggingTime)
	}
	if v.ConnTime != "" {
		w.RawString(",\"conn_time\":")
		w.String(v.ConnTime)
	}
	if v.Elastic != nil {
		w.RawString(",\"elastic\":")
		w.RawByte('{')
		{
			first := true
			for k, v := range v.Elastic {
				if first {
					first = false
				} else {
					w.RawByte(',')
				}
				w.String(k)
				w.RawByte(':')
				if err := fastjson_marshal.Marshal(w, v); err != nil && firstErr == nil {
					firstErr = err
				}
			}
		}
		w.RawByte('}')
	}
	if v.DataFlow != nil {
		w.RawString(",\"flow\":")
		if err := v.DataFlow.MarshalFastJSON(w); err != nil && firstErr == nil {
			firstErr = err
		}
	}
	if v.ID != 0 {
		w.RawString(",\"id\":")
		w.Uint64(v.ID)
	}
	if v.LocalIP != "" {
		w.RawString(",\"local_ip\":")
		w.String(v.LocalIP)
	}
	if v.RemoteIP != "" {
		w.RawString(",\"remote_ip\":")
		w.String(v.RemoteIP)
	}
	if v.Request != nil {
		w.RawString(",\"request\":")
		if err := v.Request.MarshalFastJSON(w); err != nil && firstErr == nil {
			firstErr = err
		}
	}
	if v.Response != nil {
		w.RawString(",\"response\":")
		if err := v.Response.MarshalFastJSON(w); err != nil && firstErr == nil {
			firstErr = err
		}
	}
	if v.TLSDidResume != false {
		w.RawString(",\"tls_reuse\":")
		w.Bool(v.TLSDidResume)
	}
	w.RawByte('}')
	return firstErr
}
