path.data: data
path.logs: log

entry:
  - name: my_es_entry
    enabled: true
    router: my_router
    max_concurrency: 10000
#    reduce_memory_usage: true
    network:
      binding: 0.0.0.0:8000
    tls:
      enabled: true

flow:
  - name: auth-flow
    filter:
      - basic_auth:
          valid_users:
            ingest: managemDFSDFSDFent

  - name: primary-read-flow
    filter:
      - flow:
          flows:
            - auth-flow
      - if:
          cluster_available: ["primary"]
        then:
          - elasticsearch:
              elasticsearch: "primary"
        else:
          - elasticsearch:
              elasticsearch: "backup"

  - name: primary-write-flow #正常的主写流程
    filter:
      - flow:
          flows:
            - auth-flow
      - if:
          and:
            - queue_has_lag: [ "primary", "primary-failure"]
            - cluster_available: ["primary"]
        then: #集群可用但是集群有堆积的情况，不处理客户端请求，待服务恢复之后再提供服务
          - set_response:
              status: 503
              content_type: "application/json"
              body: '{"error":true,"message":"503 Service Unavailable"}'
          - drop:
        else: # 集群不可用或者集群可用且没有堆积的情况，都直接转发给集群先处理
          - if: #集群如果已经变成不可用状态，则直接丢弃请求，让客户端选择处理，或者也可落地队列确保不丢数据
              not:
                cluster_available: ["primary"]
            then: #如果集群不可用，则直接拒绝客户端请求
              - set_response:
                  status: 503
                  content_type: "application/json"
                  body: '{"error":true,"message":"503 Service Unavailable"}'
              - elasticsearch_health_check: #由请求触发的限速模式下的主动检查后端监控情况
                  elasticsearch: "primary"
              - drop:
            else:
              - bulk_request_mutate: #修复自动生成 id 的文档，主动生成 id
                  fix_null_id: true
                  fix_null_type: true
                  default_type: _doc
                  type_rename:
                    "*": _doc #统一索引的 Type 类型，适合旧版本多 Type 迁移到新版本集群
                  remove_pipeline: true
                  generate_enhanced_id: true
              - elasticsearch: #集群可用，直接处理请求
                  elasticsearch: "primary"
                  max_connection_per_node: 1000
                  max_retry_times: 0
              - bulk_response_process:
                  success_queue: "backup"
                  failure_queue: "primary-failure"
                  invalid_queue: "primary-invalid"
                  continue_on_success: false
                  continue_on_error: false #出错不继续执行，因为成功、失败、非法的请求都已经入队，可以直接退出
              - flow:
                  flows:
                    - primary-response-check

  - name: primary-response-check
    filter:
      - if: #不合法的请求
          and:
            - not:
                in:
                  _ctx.response.status: [ 429 ] #400_500 之间但不包括 429
            - range:
                _ctx.response.status.gte: 400
                _ctx.response.status.lt: 500
        then:
          - queue:
              queue_name: "primary-invalid"
          - drop:
      - if: #正常的请求, 复制到备份集群
          in:
            _ctx.response.status: [200,201]
        then: #仅正常处理的集群才转发给后端集群
          - queue:
              queue_name: "backup"
          - drop:
        else: #集群可用的情况下但是失败了，可能存在脏写，将请求放入写入失败队列，后续可以选择两边集群都重做一次，最终确保一致性，写 translog，后续提供 UI 可以进行三方检查：主、备集群和本地日志
          - queue:
              queue_name: "primary-failure"

  - name: primary-flow-post-processing #处理通过 commit，处理失败重试，非法请求丢弃
    filter:
      - if:
          not:
            cluster_available: ["primary"]
        then:
          - elasticsearch_health_check:
              elasticsearch: "primary"
          - sleep:
              sleep_in_million_seconds: 5000
          - drop:
#      - retry_limiter:
#          queue_name: "primary-deadletter_requests"
#          max_retry_times: 60
#          tag_on_success: ["commit_message_allowed"]
      - bulk_request_mutate: #修复自动生成 id 的文档，主动生成 id
          fix_null_id: true
          fix_null_type: true
          default_type: _doc
          type_rename:
            "*": _doc #统一索引的 Type 类型，适合旧版本多 Type 迁移到新版本集群
          remove_pipeline: true
          generate_enhanced_id: true
      - elasticsearch:
          elasticsearch: "primary"
          max_connection_per_node: 1000
          max_retry_times: 0
      - if: #429 重试
          in:
            _ctx.response.status: [ 429,0,500,503 ]
        then:
          - drop:
      - bulk_response_process:
          success_queue: "backup"
          failure_queue: "primary-failure"
          invalid_queue: "primary-invalid"
          continue_on_success: true
          continue_on_error: true
          tag_on_all_error: [ "commit_message_allowed" ]
          tag_on_all_success: [ "commit_message_allowed" ]
      - if: #不合法的请求
          and:
            - not:
                in:
                  _ctx.response.status: [ 429 ] #400_500 之间但不包括 429
            - range:
                _ctx.response.status.gte: 400
                _ctx.response.status.lt: 500
        then:
          - tag:
              add: [ "commit_message_allowed" ]
          - queue:
              queue_name: "primary-invalid"
          - drop:
      - if:
          in:
            _ctx.response.status: [ 200,201 ]
        then:
          - queue:
              queue_name: "backup"
          - tag:
              add: [ "commit_message_allowed" ]


  - name: backup-flow-replicate-processing
    filter:
      - if:
          not:
            cluster_available: ["backup"]
        then:
          - elasticsearch_health_check:
              elasticsearch: "backup"
          - sleep:
              sleep_in_million_seconds: 5000
          - drop:
      - retry_limiter:
          queue_name: "backup-deadletter_requests"
          max_retry_times: 60
          tag_on_success: ["commit_message_allowed"]
#      - bulk_request_mutate: #修复自动生成 id 的文档，主动生成 id
#          fix_null_id: true
#          fix_null_type: true
#          default_type: _doc
#          type_rename:
#            "*": _doc #统一索引的 Type 类型，适合旧版本多 Type 迁移到新版本集群
#          #              index_rename:
#          #                test: "test-backup"
#          remove_pipeline: true
#          generate_enhanced_id: true
#          when:
#            contains:
#              _ctx.request.path: /_bulk
      - elasticsearch:
          elasticsearch: "backup"
          max_connection_per_node: 1000
          max_retry_times: 0
      - bulk_response_process:
          continue_on_error: false # 如果部分请求出错，保存相关的消息到队列后，直接结束，不继续后续流程的处理
          invalid_queue: "backup-invalid"
          tag_on_all_success: ["commit_message_allowed"]
          tag_on_all_error: ["commit_message_allowed"]
          when:
            contains:
              _ctx.request.path: /_bulk
      - if:
          in:
            _ctx.response.status: [ 200,201,404,400 ]
        then:
          - tag:
              add: ["commit_message_allowed"]

  - name: backup-flow-reshuffle-replicate-processing
    filter:
      - if:
          not:
            cluster_available: ["backup"]
        then:
          - elasticsearch_health_check:
              elasticsearch: "backup"
          - sleep:
              sleep_in_million_seconds: 5000
          - drop:
#      - bulk_request_mutate: #修复自动生成 id 的文档，主动生成 id
#          fix_null_id: true
#          fix_null_type: true
#          default_type: _doc
#          type_rename:
#          "*": "_doc" #统一索引的 Type 类型，适合旧版本多 Type 迁移到新版本集群
#          #              index_rename:
#          #                test: "test-backup"
#          remove_pipeline: true # pipeline should be enabled manually, please ensure each cluster has the same setup
#          generate_enhanced_id: true
#          when:
#            contains:
#              _ctx.request.path: /_bulk
#      - record:
#          stdout: true
      - bulk_reshuffle:
          when:
            contains:
              _ctx.request.path: /_bulk
          elasticsearch: "backup"
          queue_name_prefix: "async_bulk"
          level: index #cluster,node,index,shard
          partition_size: 3
          fix_null_id: true
          tag_on_success: ["commit_message_allowed"]
      - elasticsearch:
          elasticsearch: "backup"
          max_retry_times: 0
          max_connection_per_node: 1000
      - bulk_response_process:
          continue_on_success: false # 如果部分请求出错，保存相关的消息到队列后，直接结束，不继续后续流程的处理
          continue_on_error: false # 如果部分请求出错，保存相关的消息到队列后，直接结束，不继续后续流程的处理
          invalid_queue: "backup-invalid"
          tag_on_all_success: ["commit_message_allowed"]
          tag_on_all_error: ["commit_message_allowed"]
          when:
            contains:
              _ctx.request.path: /_bulk
      - if: #不合法的请求
          and:
          - not:
              in:
                _ctx.response.status: [ 429 ] #400_500 之间但不包括 429
          - range:
              _ctx.response.status.gte: 400
              _ctx.response.status.lt: 500
        then:
          - queue:
              queue_name: "backup-invalid"
          - tag:
              add: [ "commit_message_allowed" ] # 非法请求不处理了，commit 继续往后处理
          - drop:
      - if:
          in:
            _ctx.response.status: [ 200,201 ]
        then:
          - tag:
              add: ["commit_message_allowed"]

  - name: request_logging # this flow is used for request logging, refer to `router`'s `tracing_flow`
    filter:
#      - record:
#          stdout: true
#          filename: requests.txt
      - context_filter:
          context: _ctx.request.path
          exclude:
            - /favicon.ico
      - logging:
          queue_name: request_logging
          max_request_body_size: 102400
          max_response_body_size: 102400
          when:
            or:
              - equals:
                  _ctx.response.header.X-BulkRequest-Failed: "true"
              - not:
                  in:
                    _ctx.response.status: [ 200,201,404 ]
  - name: deny_flow # this flow is used for request logging, refer to `router`'s `tracing_flow`
    filter:
      - set_response:
          body: "request not allowed"
          status: 500
#_delete_by_query not supported
router:
  - name: my_router
    default_flow: primary-write-flow
    tracing_flow: request_logging
    rules:
      - method:
          - "GET"
          - "HEAD"
        pattern:
          - "/{any:*}"
        flow:
          - primary-read-flow
      - method:
          - "*"
        pattern:
          - "/_cat"
          - "/_sql"
          - "/_cluster"
          - "/_refresh"
          - "/_count"
          - "/_search"
          - "/_msearch"
          - "/_mget"
          - "/{any_index}/_eql/search"
          - "/{any_index}/_count"
          - "/{any_index}/_search"
          - "/{any_index}/_msearch"
          - "/{any_index}/_mget"
        flow:
          - primary-read-flow
      - method:
          - "*"
        pattern:
          - "/_reindex"
          - "/_delete_by_query"
          - "/_update_by_query"
          - "/{any_index}/_reindex"
          - "/{any_index}/_delete_by_query"
          - "/{any_index}/_update_by_query"
        flow:
          - deny_flow
      - method:
          - "DELETE"
        pattern:
          - "/{any_index}"
          - "/{any_index}/{any_type}"
        flow:
          - deny_flow

elasticsearch:
  - name: backup
    enabled: true
    endpoints:
      - http://192.168.3.188:9204
#      - http://192.168.3.98:9200
    basic_auth:
      username: elastic
      password: changeme
    #    traffic_control:
    #      max_qps_per_node: 1000
    discovery:
      enabled: true
      refresh:
        enabled: true
        interval: 60s
  - name: primary
    enabled: true
    endpoints:
#      - http://192.168.3.98:9200
      - http://192.168.3.188:9207
      - http://192.168.3.188:9217
      - http://192.168.3.188:9227
    basic_auth:
      username: test
      password: testtest
    discovery:
      enabled: true
      refresh:
        enabled: true
        interval: 60s


pipeline:
  # pipelines for logging
  - name: request_logging_index
    auto_start: true
    keep_running: true
    processor:
      - json_indexing:
          index_name: "gateway_requests"
          elasticsearch: "backup"
          input_queue: "request_logging"
          when:
            cluster_available: [ "backup" ]

  # pipelines for primary cluster
  - name: queue_primary-dead_retry-consumer
    auto_start: false
    keep_running: false
    processor:
      - flow_runner:
          input_queue: "primary-deadletter_requests"
          flow: primary-flow-post-processing
          commit_on_tag: "commit_message_allowed"
          when:
            cluster_available: [ "primary" ]
  - name: queue_primary-failure-consumer
    auto_start: true
    keep_running: true
    processor:
      - flow_runner:
          input_queue: "primary-failure"
          flow: primary-flow-post-processing
          commit_on_tag: "commit_message_allowed"
          when:
            cluster_available: [ "primary" ]

## option A - pipelines for backup cluster - safety first, each requests are replicated in order, the speed may slow
#  - name: queue_backup-consumer
#    auto_start: true
#    keep_running: true
#    processor:
#      - flow_runner:
#          input_queue: "backup"
#          flow: backup-flow-replicate-processing
#          commit_on_tag: "commit_message_allowed"
#          consumer:
#            group: "group123"
#            name: "name133"
#          when:
#            and:
#              - cluster_available: ["backup"]

# option B - pipelines for backup cluster, reshuffle bulk requests
  - name: queue_backup-consumer
    auto_start: true
    keep_running: true
    processor:
      - flow_runner:
          input_queue: "backup"
          flow: backup-flow-reshuffle-replicate-processing
          commit_on_tag: "commit_message_allowed"
          consumer:
            fetch_max_messages: 1000
          when:
            and:
              - cluster_available: ["backup"]

  - name: queue_backup-bulk_request_ingest
    auto_start: true
    keep_running: true
    processor:
      - bulk_indexing:
          bulk_size_in_mb: 10
          fetch_max_messages: 1000
          waiting_after:
            - "backup-failure"
          queues:
            type: bulk_reshuffle
          when:
             cluster_available: [ "backup" ]

  - name: queue_backup-failure-consumer
    auto_start: true
    keep_running: true
    processor:
      - flow_runner:
          input_queue: "backup-failure"
          flow: backup-flow-replicate-processing
          commit_on_tag: "commit_message_allowed"
          when:
            cluster_available: [ "backup" ]

## let's upload disk queue files to s3 for backup
disk_queue:
  upload_to_s3: true
  compress_on_message_payload:
    enabled: true
    level: 11
  s3:
    server: my_blob_store
    location: cn-beijing-001
    bucket: infini-replica-blob-store

s3:
  my_blob_store:
    endpoint: "192.168.3.188:9000"
    access_key: "minio"
    access_secret: "miniostorage"
