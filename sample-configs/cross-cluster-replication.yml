path.data: data
path.logs: log

entry:
  - name: my_es_entry
    enabled: true
    router: my_router
    max_concurrency: 10000
#    reduce_memory_usage: true
    network:
      binding: 0.0.0.0:8000
    tls:
      enabled: false

flow:
  - name: primary-read-flow
    filter:
      - if:
          cluster_available: ["primary"]
        then:
          - elasticsearch:
              elasticsearch: "primary"
        else:
          - elasticsearch:
              elasticsearch: "backup"

  - name: primary-flow-post-processing #主集群的请求离线回放
    filter:
#      - set_basic_auth: #覆盖身份信息
#          username: elastic
#          password: changeme
      - if:
          cluster_available: ["primary"]
        then:
          - retry_limiter:
              queue_name: "primary-deadletter_requests"
              retry_interval_in_ms: 1000
              max_retry_times: 60
          - elasticsearch:
              elasticsearch: "primary"
              max_connection_per_node: 1000
          - bulk_response_process:
              continue_on_error: false # 如果部分请求出错，保存相关的消息到队列后，直接结束，不继续后续流程的处理
              success_queue: "backup" #执行成功的请求可以复制到备份集群
              invalid_queue: "primary-deadletter_requests" #离线回放的时候的错误请求，直接进死信队列，只能人工处理
              failure_queue: "primary-post-processing-failure" #重放还失败的请求，TODO panic，发起重试
              when:
                contains:
                  _ctx.request.path: /_bulk
          - if: #429 重试
              in:
                _ctx.response.status: [ 429 ]
            then:
              - queue:
                  queue_name: "primary-post-processing-failure"
              - drop:
          - if: #不合法的请求，403,404,413,400，直接丢弃，不用入队列
              range:
                _ctx.response.status.gte: 400
                _ctx.response.status.lt: 500
            then:
              - drop:
          - if:
              in:
                _ctx.response.status: [ 200,201,404 ]
            then:
#              - set_basic_auth: #覆盖身份信息
#                  username: test
#                  password: testtest
              - queue:
                  queue_name: "backup"
            else:
              - queue:
                  queue_name: "primary-post-processing-failure"
        else:
          - queue:
              queue_name: "primary-post-processing-failure"
          - elasticsearch_health_check:
              elasticsearch: "primary"
          - sleep:
              sleep_in_million_seconds: 5000

  - name: primary-write-flow #正常的主写流程
    filter:
#      - set_basic_auth: #覆盖身份信息
#          username: elastic
#          password: changeme
      - if:
          and:
            - queue_has_lag: [ "primary", "primary-failure"]
            - cluster_available: ["primary"]
        then: #集群可用但是集群有堆积的情况，不处理客户端请求，待服务恢复之后再提供服务
          - set_response:
              status: 503
              content_type: "application/json"
              body: '{"error":true,"message":"503 Service Unavailable"}'
          - drop:
        else: # 集群不可用或者集群可用且没有堆积的情况，都直接转发给集群先处理
          - if: #集群如果已经变成不可用状态，则直接丢弃请求，让客户端选择处理，或者也可落地队列确保不丢数据
              not:
                cluster_available: ["primary"]
            then: #如果集群不可用，则直接拒绝客户端请求
              - set_response:
                  status: 503
                  content_type: "application/json"
                  body: '{"error":true,"message":"503 Service Unavailable"}'
              - elasticsearch_health_check: #由请求触发的限速模式下的主动检查后端监控情况
                  elasticsearch: "primary"
              - drop:
          - bulk_request_mutate: #修复自动生成 id 的文档，主动生成 id
              fix_null_id: true
              fix_null_type: true
              default_type: _doc
              type_rename:
                "*": _doc #统一索引的 Type 类型，适合旧版本多 Type 迁移到新版本集群
              generate_enhanced_id: true
              when:
                contains:
                  _ctx.request.path: /_bulk
          - elasticsearch: #集群可用，直接处理请求
              elasticsearch: "primary"
              max_connection_per_node: 1000
          - bulk_response_process: #如果是 bulk 请求，还需要进一步验证是否存在部分请求失败的错误异常
              continue_on_error: false # 如果部分请求出错，保存相关的消息到队列后，直接结束，不继续后续流程的处理
              success_queue: "backup" #已经写入成功的请求，发送到备份集群的队列，进行复制
              invalid_queue: "primary-invalid" #TODO 记录日志，请求和响应结果
              failure_queue: "primary-failure" # 记录完整请求到失败队列，可以根据需要重做
              when:
                contains:
                  _ctx.request.path: /_bulk
          - if: #429 重试
              in:
                _ctx.response.status: [ 429 ]
            then:
              - queue:
                  queue_name: "primary-failure"
              - drop:
          - if: #不合法的请求，403,404,413,400，直接返回给客户端，不用入队列
              range:
                _ctx.response.status.gte: 400
                _ctx.response.status.lt: 500
            then:
              - drop:
          - if: #正常的请求, 复制到备份集群
              in:
                _ctx.response.status: [200,201,404]
            then: #仅正常处理的集群才转发给后端集群
#              - set_basic_auth: #覆盖身份信息
#                  username: test
#                  password: testtest
              - queue:
                  queue_name: "backup"
            else: #集群可用的情况下但是失败了，可能存在脏写，将请求放入写入失败队列，后续可以选择两边集群都重做一次，最终确保一致性，写 translog，后续提供 UI 可以进行三方检查：主、备集群和本地日志
              - queue:
                  queue_name: "primary-failure"
  - name: backup-flow-replicate-processing
    filter:
#      - set_basic_auth: #覆盖身份信息
#          username: elastic
#          password: changeme
      - if:
          cluster_available: ["backup"]
        then:
          - retry_limiter:
              queue_name: "backup-deadletter_requests"
              max_retry_times: 60
          - elasticsearch:
              elasticsearch: "backup"
              max_connection_per_node: 1000
          - bulk_response_process:
              continue_on_error: false # 如果部分请求出错，保存相关的消息到队列后，直接结束，不继续后续流程的处理
              save_partial_success_requests: false #执行成功的不需要保存
              invalid_queue: "backup-invalid"
              failure_queue: "backup-failure"
              when:
                contains:
                  _ctx.request.path: /_bulk
          - if: #429 重试
              in:
                _ctx.response.status: [ 429 ]
            then:
              - queue:
                  queue_name: "backup-failure"
              - drop:
          - if: #不合法的请求，403,404,413,400，直接返回给客户端，不用入队列
              range:
                _ctx.response.status.gte: 400
                _ctx.response.status.lt: 500
            then:
              - queue:
                  queue_name: "backup-invalid"
              - drop:
          - if:
              not:
                in:
                  _ctx.response.status: [ 200,201,404 ]
            then:
              - queue:
                  queue_name: "backup-failure"
        else:
          - queue:
              queue_name: "backup-failure"
          - elasticsearch_health_check:
              elasticsearch: "backup"
          - sleep:
              sleep_in_million_seconds: 5000
  - name: backup-flow-reshuffle-replicate-processing
    filter:
#      - set_basic_auth: #覆盖身份信息
#          username: elastic
#          password: changeme
      - if:
          cluster_available: ["backup"]
        then:
          - retry_limiter:
              queue_name: "backup-deadletter_requests"
              max_retry_times: 60
          - bulk_reshuffle:
              when:
                contains:
                  _ctx.request.path: /_bulk
              elasticsearch: "backup"
              level: partition #cluster,node,shard,partition
              partition_size: 10
              mode: async
              fix_null_id: true
          - echo:
              message: "skip bulk reshuffle\n"
          - elasticsearch:
              elasticsearch: "backup"
              max_connection_per_node: 1000
          - bulk_response_process:
              continue_on_error: false # 如果部分请求出错，保存相关的消息到队列后，直接结束，不继续后续流程的处理
              save_partial_success_requests: false # 执行成功的请求不需要继续处理
              invalid_queue: "backup-invalid"
              failure_queue: "backup-failure"
              when:
                contains:
                  _ctx.request.path: /_bulk
          - if: #429 重试
              in:
                _ctx.response.status: [ 429 ]
            then:
              - queue:
                  queue_name: "backup-failure"
              - drop:
          - if: #不合法的请求，403,404,413,400，直接返回给客户端，不用入队列
              range:
                _ctx.response.status.gte: 400
                _ctx.response.status.lt: 500
            then:
              - queue:
                  queue_name: "backup-invalid"
          - if:
              not:
                in:
                  _ctx.response.status: [ 200,201,404 ]
            then:
              - queue:
                  queue_name: "backup-failure"
        else:
          - queue:
              queue_name: "backup-failure"
          - elasticsearch_health_check:
              elasticsearch: "backup"
          - sleep:
              sleep_in_million_seconds: 5000
  - name: request_logging # this flow is used for request logging, refer to `router`'s `tracing_flow`
    filter:
      - context_filter:
          context: _ctx.request.path
          exclude:
            - /favicon.ico
      - logging:
          queue_name: request_logging
          max_request_body_size: 1024
          max_response_body_size: 1024
          when:
            not:
              equals:
                _ctx.response.status: 200

router:
  - name: my_router
    default_flow: primary-write-flow
    tracing_flow: request_logging
    rules:
      - method:
          - "GET"
          - "HEAD"
        pattern:
          - "/{any:*}"
        flow:
          - primary-read-flow
      - method:
          - "POST"
          - "GET"
        pattern:
          - "/_refresh"
          - "/_count"
          - "/_search"
          - "/_msearch"
          - "/_mget"
          - "/{any_index}/_count"
          - "/{any_index}/_search"
          - "/{any_index}/_msearch"
          - "/{any_index}/_mget"
        flow:
          - primary-read-flow

elasticsearch:
  - name: primary
    enabled: true
    endpoints:
#    - http://localhost:9200
    - http://192.168.3.188:9204
    basic_auth:
      username: elastic
      password: changeme
#    traffic_control:
#      max_qps_per_node: 1000
    discovery:
      enabled: true
      refresh:
        enabled: true
        interval: 60s
  - name: backup
    enabled: true
    endpoints:
#    - http://localhost:9200
    - http://192.168.3.188:9206
    - http://192.168.3.98:9200
    basic_auth:
      username: test
      password: testtest
    discovery:
      enabled: true
      refresh:
        enabled: true
        interval: 60s

pipeline:
  # pipelines for logging
  - name: request_logging_index
    auto_start: true
    keep_running: true
    processor:
      - json_indexing:
          index_name: "gateway_requests"
          elasticsearch: "backup"
          input_queue: "request_logging"
          when:
            cluster_available: [ "backup" ]

  # pipelines for primary cluster
  - name: queue_primary-dead_retry-consumer
    auto_start: false
    keep_running: false
    processor:
      - flow_runner:
          input_queue: "primary-deadletter_requests"
          flow: primary-flow-post-processing
          when:
            cluster_available: [ "primary" ]
  - name: queue_primary-failure-consumer
    auto_start: true
    keep_running: true
    processor:
      - flow_runner:
          input_queue: "primary-failure"
          flow: primary-flow-post-processing
          when:
            cluster_available: [ "primary" ]

# option A - pipelines for backup cluster - safety first, each requests are replicated in order, the speed may slow
  - name: queue_backup-failure-consumer
    auto_start: true
    keep_running: true
    processor:
      - flow_runner:
          input_queue: "backup-failure"
          flow: backup-flow-replicate-processing
          when:
            cluster_available: [ "backup" ]

  - name: queue_backup-consumer
    auto_start: true
    keep_running: true
    processor:
      - flow_runner:
          input_queue: "backup"
          flow: backup-flow-replicate-processing
          when:
            and:
              - not:
                  or:
                    - queue_has_lag: [ "backup-failure"]
              - cluster_available: ["backup"]

## option B - pipelines for backup cluster
#  - name: queue_backup-consumer
#    auto_start: true
#    keep_running: true
#    processor:
#      - flow_runner:
#          input_queue: "backup"
#          flow: backup-flow-reshuffle-replicate-processing
#          when:
#            and:
#              - cluster_available: ["backup"]
#  - name: queue_backup-failure-consumer
#    auto_start: true
#    keep_running: true
#    processor:
#      - flow_runner:
#          input_queue: "backup-failure"
#          flow: backup-flow-reshuffle-replicate-processing
#          when:
#            cluster_available: [ "backup" ]
#  - name: queue_backup-bulk_request_ingest
#    auto_start: true
#    keep_running: true
#    processor:
#      - bulk_indexing:
#          when:
#            cluster_available: [ "backup" ]
#          bulk_size_in_mb: 10
#          queues:
#            type: bulk_reshuffle
