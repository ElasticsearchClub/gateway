path.data: data
path.logs: log

entry:
  - name: my_es_entry
    enabled: true
    router: my_router
    max_concurrency: 10000
#    reduce_memory_usage: true
    network:
      binding: 0.0.0.0:8000
    tls:
      enabled: false

flow:
  - name: primary-read-flow
    filter:
      - if:
          cluster_available: ["primary"]
        then:
          - elasticsearch:
              elasticsearch: "primary"
        else:
          - elasticsearch:
              elasticsearch: "backup"
  - name: primary-flow-post-processing
    filter:
      - retry_limiter:
          queue_name: "primary-deadlock-requests"
          max_retry_times: 3
      - set_basic_auth: #覆盖身份信息
          username: elastic
          password: changeme
      - if:
          cluster_available: ["primary"]
        then:
          - retry_limiter:
              queue_name: "primary-deadletter_requests"
              max_retry_times: 5
          - elasticsearch:
              elasticsearch: "primary"
              max_connection_per_host: 1000
          - bulk_response_validate:
              invalid_status: 400
              failure_status: 507
              invalid_queue: "primary-invalid_bulk_requests"
              failure_queue: "primary-failure_bulk_requests"
          - if: #429 重试
              in:
                _ctx.response.status: [ 429 ]
            then:
              - queue:
                  queue_name: "primary-failure"
              - drop:
          - if: #不合法的请求，403,404,413,400，直接返回给客户端，不用入队列
              range:
                _ctx.response.status.gte: 400
                _ctx.response.status.lt: 500
            then:
              - drop:
          - if:
              in:
                _ctx.response.status: [ 200,201 ]
            then:
#              - set_basic_auth: #覆盖身份信息
#                  username: test
#                  password: testtest
              - queue:
                  queue_name: "backup"
            else:
              - queue:
                  queue_name: "primary-failure"
        else:
          - queue:
              queue_name: "primary-failure"
          - elasticsearch_health_check:
              elasticsearch: "primary"
      - flow:
          flows:
            - request_logging
  - name: primary-write-flow
    filter:
      - retry_limiter:
          queue_name: "primary_deadletter_requests"
          max_retry_times: 5
#      - set_basic_auth: #覆盖身份信息
#          username: elastic
#          password: changeme
      - if:
          and:
            - queue_has_lag: [ "primary>100", "primary-failure>100", "primary-failure_bulk_requests>100" ]
            - cluster_available: ["primary"]
        then: #集群可用但是集群有堆积的情况，不处理客户端请求，待服务恢复之后再提供服务
          - set_response:
              status: 503
              content_type: "application/json"
              body: '{"error":true,"message":"503 Service Unavailable"}'
          - drop:
        else: # 集群不可用或者集群可用且没有堆积的情况，都直接转发给集群先处理
          - if: #集群如果已经变成不可用状态，则直接丢弃请求，让客户端选择处理，或者也可落地队列确保不丢数据
              not:
                cluster_available: ["primary"]
            then: #如果集群不可用，则直接拒绝客户端请求
              - set_response:
                  status: 503
                  content_type: "application/json"
                  body: '{"error":true,"message":"503 Service Unavailable"}'
              - elasticsearch_health_check: #由请求触发的限速模式下的主动检查后端监控情况
                  elasticsearch: "primary"
              - drop:
          - elasticsearch: #集群可用，直接处理请求
              elasticsearch: "primary"
              max_connection_per_host: 1000
          - bulk_response_validate: #如果是 bulk 请求，还需要进一步验证是否存在部分请求失败的错误异常
              invalid_status: 400
              failure_status: 507
              invalid_queue: "primary-invalid_bulk_requests"
              failure_queue: "primary-failure_bulk_requests"
              when:
                contains:
                  _ctx.request.path: /_bulk
          - if: #429 重试
              in:
                _ctx.response.status: [ 429 ]
            then:
              - queue:
                  queue_name: "primary-failure"
              - drop:
          - if: #不合法的请求，403,404,413,400，直接返回给客户端，不用入队列
              range:
                _ctx.response.status.gte: 400
                _ctx.response.status.lt: 500
            then:
              - drop:
          - if: #正常的请求, 复制到备份集群
              in:
                _ctx.response.status: [200,201]
            then: #仅正常处理的集群才转发给后端集群
#              - set_basic_auth: #覆盖身份信息
#                  username: test
#                  password: testtest
              - queue:
                  queue_name: "backup"
            else: #集群可用的情况下但是失败了，可能存在脏写，将请求放入写入失败队列，后续可以选择两边集群都重做一次，最终确保一致性，写 translog，后续提供 UI 可以进行三方检查：主、备集群和本地日志
              - queue:
                  queue_name: "primary-failure"
  - name: request_logging # this flow is used for request logging, refer to `router`'s `tracing_flow`
    filter:
      - stats:
      - logging:
          queue_name: request_logging
          max_request_body_size: 1024
          max_response_body_size: 1024
          when:
            not:
              equals:
                _ctx.response.status: 200

router:
  - name: my_router
    default_flow: primary-write-flow
    tracing_flow: request_logging
    rules:
      - method:
          - "GET"
          - "HEAD"
        pattern:
          - "/{any:*}"
        flow:
          - primary-read-flow
      - method:
          - "POST"
          - "GET"
        pattern:
          - "/_refresh"
          - "/_count"
          - "/_search"
          - "/_msearch"
          - "/_mget"
          - "/{any_index}/_count"
          - "/{any_index}/_search"
          - "/{any_index}/_msearch"
          - "/{any_index}/_mget"
        flow:
          - primary-read-flow

elasticsearch:
  - name: primary
    enabled: true
    endpoint: http://192.168.3.188:9206
    basic_auth: #used to discovery full cluster nodes, or check elasticsearch's health and versions
      username: elastic
      password: changeme
#    traffic_control:
#      max_qps_per_node: 1000
    discovery: # auto discovery elasticsearch cluster nodes
      enabled: true
      refresh:
        enabled: true
        interval: 60s
  - name: backup
    enabled: true
    endpoint: http://192.168.3.188:9204
    basic_auth:
      username: test
      password: testtest
    discovery: # auto discovery elasticsearch cluster nodes
      enabled: true
      refresh:
        enabled: true
        interval: 60s

pipelines:
  - name: request_logging_index
    auto_start: true
    keep_running: true
    processors:
      - json_indexing:
          index_name: "gateway_requests"
          elasticsearch: "backup"
          input_queue: "request_logging"
          when:
            cluster_available: [ "backup" ]
  - name: queue_primary-dead_retry-consumer
    auto_start: false
    processors:
      - flow_runner:
          input_queue: "primary_deadletter_requests"
          flow: primary-flow-post-processing
          when:
            cluster_available: [ "primary" ]
  - name: queue_primary-failure-consumer
    auto_start: true
    keep_running: true
    processors:
      - flow_runner:
          input_queue: "primary-failure"
          flow: primary-flow-post-processing
          when:
            cluster_available: [ "primary" ]
  - name: queue_primary-bulk-failure-consumer
    auto_start: true
    keep_running: true
    processors:
      - flow_runner:
          input_queue: "primary-failure_bulk_requests"
          flow: primary-flow-post-processing
          when:
            cluster_available: [ "primary" ]
  - name: queue_primary-invalid_bulk_requests-consumer
    processors:
      - flow_runner:
          input_queue: "primary-invalid_bulk_requests"
          flow: primary-flow-post-processing
          when:
            cluster_available: [ "primary" ]
  - name: queue_backup-failure-consumer
    auto_start: true
    keep_running: true
    processors:
      - queue_consumer:
          input_queue: "backup-failure"
          elasticsearch: "backup"
          failure_queue: "backup-failure"
          worker_size: 1
          compress: true
          when:
            cluster_available: [ "backup" ]
  - name: queue_backup-consumer
    auto_start: true
    keep_running: true
    processors:
      - queue_consumer:
          input_queue: "backup"
          elasticsearch: "backup"
          failure_queue: "backup-failure"
          invalid_queue: "backup-invalid"
          dead_letter_queue: "backup-dead_letter"
          waiting_after: [ "backup-failure"]
          worker_size: 1
          compress: false
          when:
            cluster_available: [ "backup" ]
