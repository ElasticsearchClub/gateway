/* Â©INFINI.LTD, All Rights Reserved.
 * mail: hello#infini.ltd */

package elastic

import (
	"fmt"
	"infini.sh/framework/core/config"
	"infini.sh/framework/core/global"
	"infini.sh/framework/core/pipeline"
	"infini.sh/framework/core/util"
	"infini.sh/framework/lib/fasthttp"
	log "github.com/cihub/seelog"
	"strings"
)

type AutoGenerateDocID struct {
	Prefix string `config:"prefix" `
}

func init() {
	pipeline.RegisterFilterPluginWithConfigMetadata("auto_generate_doc_id", New, &AutoGenerateDocID{})
}

func New(c *config.Config) (pipeline.Filter, error) {

	runner := AutoGenerateDocID{}

	if err := c.Unpack(&runner); err != nil {
		return nil, fmt.Errorf("failed to unpack the filter configuration : %s", err)
	}

	return &runner, nil
}

func (filter *AutoGenerateDocID) Name() string {
	return "auto_generate_doc_id"
}


func (filter *AutoGenerateDocID) Filter(ctx *fasthttp.RequestCtx) {

	path:=string(ctx.PhantomURI().Path())
	valid,indexPath,typePath,idPath := ParseURLMeta(path)
	if global.Env().IsDebug{
		log.Infof("auto_generate_doc_id: %v => %v, %v, %v, %v",path,valid,indexPath,typePath,idPath)
	}
	if valid{
		if idPath==""{
			idPath=util.GetUUID()
			if filter.Prefix!=""{
				idPath=filter.Prefix+idPath
			}
			ctx.Request.Header.Set("X-Generated-ID",idPath)
			ctx.Response.Header.Set("X-Generated-ID",idPath)
		}

		uri := ctx.Request.CloneURI()
		uri.SetPath(fmt.Sprintf("/%s/%s/%s",indexPath,typePath,idPath))
		ctx.Request.SetURI(uri)
		fasthttp.ReleaseURI(uri)
	}
}


func ParseURLMeta(pathStr string) (valid bool,urlLevelIndex, urlLevelType,id string) {

	if strings.Index(pathStr, "//") >= 0 {
		pathStr = strings.ReplaceAll(pathStr, "//", "/")
	}

	if strings.LastIndex(pathStr, "/") == 0 {
		return false,urlLevelIndex, urlLevelType,id
	}

	if util.SuffixStr(pathStr, "/") {
		pathStr = util.TrimRightStr(pathStr, "/")
	}

	pathArray := strings.Split(pathStr, "/")

	last := pathArray[len(pathArray)-1]

	//only _doc and _create are valid for create new doc
	if util.PrefixStr(last,"_") && !util.ContainsAnyInArray(last, []string{"_create","_doc"}) {
		return false,urlLevelIndex, urlLevelType,id
	}

	switch len(pathArray) {
	case 5:
		urlLevelIndex = pathArray[1]
		urlLevelType = pathArray[2]
		id = pathArray[3]
		break
	case 4:
		urlLevelIndex = pathArray[1]
		urlLevelType = pathArray[2]
		id = pathArray[3]
		break
	case 3:
		urlLevelIndex = pathArray[1]
		urlLevelType = pathArray[2]
		break
	case 2:
		urlLevelIndex = pathArray[1]
		return false,urlLevelIndex, urlLevelType,id
	}

	if util.SuffixStr(urlLevelIndex, "_") {
		return false,urlLevelIndex, urlLevelType,id
	}

	return true,urlLevelIndex, urlLevelType,id
}
